#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <iostream>
#include <iomanip>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <math.h>

using namespace std;
using namespace boost::asio;

#define BYTE0(pointer) (*((char*)(&pointer)+0));
#define width_robot 0.31
#define ticks_per_meter 400000
#define MS_RADMIN 233

ros::Time current_time, last_time;
double x = 0.0;
double y = 0.0;
double th = 0.0;
double vx = 0.0;
double vy = 0.0;
double vth = 0.0;
unsigned char buf[6] = {0xff,0x00,0x00,0x00,0x00,0xfe};


geometry_msgs::Quaternion odom_quat;

void cmd_velCallback(const geometry_msgs::Twist &twist_aux)  //具体数据处理在这个毁掉函数里，我的pid单位是转/分钟 所以存在一个常量。
{
    geometry_msgs::Twist twist = twist_aux;
    double vel_x = twist_aux.linear.x;
    double vel_th = twist_aux.angular.z;
    double right_vel = 0.0;
    double left_vel = 0.0;
    if(vel_x == 0)
    {
        right_vel = vel_th * width_robot / 2.0;
        left_vel = (-1) * right_vel;
    }
    else if(vel_th == 0)
    {
        left_vel = right_vel = vel_x;
    }
    else
    {
        left_vel = vel_x - vel_th * width_robot / 2.0;
        right_vel = vel_x + vel_th * width_robot / 2.0;
    }
    
    right_vel = right_vel*MS_RADMIN;
    left_vel  = left_vel*MS_RADMIN;
    ROS_INFO("The car speed r is %2f",right_vel);
    ROS_INFO("The car speed l is %2f",left_vel);
    buf[1] = (signed char)left_vel;
    buf[2] = (signed char)right_vel;

    buf[3] = BYTE0(buf[1]);
    buf[4] = BYTE0(buf[2]);
}

unsigned char buf1[10];
float Data_vx;
float Data_vth;

int HerdWore_vx;
int HerdWore_vth;

int main(int argc, char** argv)
{
    unsigned char buf1[10],i;

    io_service iosev;
        serial_port sp(iosev, "/dev/ttyUSB0");
        sp.set_option(serial_port::baud_rate(115200));
        sp.set_option(serial_port::flow_control(serial_port::flow_control::none));
        sp.set_option(serial_port::parity(serial_port::parity::none));
        sp.set_option(serial_port::stop_bits(serial_port::stop_bits::one));
        sp.set_option(serial_port::character_size(8));

    ros::init(argc, argv, "base_controller");
    ros::NodeHandle n;
    ros::Subscriber cmd_vel_sub = n.subscribe("cmd_vel", 10, cmd_velCallback);
    ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
      tf::TransformBroadcaster odom_broadcaster;
    current_time = ros::Time::now();
     last_time = ros::Time::now();
    while(ros::ok())
    {
        ros::spinOnce();  
        write(sp, buffer(buf, 6));  //write the speed for cmd_val             
        current_time = ros::Time::now();
        read(sp, buffer(buf1));
        if(buf1[0] == 0xff && buf1[9] == 0xfe)
        {
        
            HerdWore_vx  = (buf1[4]<<24 | buf1[3]<<16 | buf1[2]<<8 | buf1[1]); 
               HerdWore_vth = (buf1[8]<<24 | buf1[7]<<16 | buf1[6]<<8 | buf1[5]); 
               Data_vx  = *((float*)&HerdWore_vx);
               Data_vth = *((float*)&HerdWore_vth);
            vx = (double)Data_vx;
            vth = (double)Data_vth;
            
        }
        
        double dt = (current_time - last_time).toSec();
        double delta_x = (vx * cos(th) - vy * sin(th)) * dt;
        double delta_y = (vx * sin(th) + vy * cos(th)) * dt;
        double delta_th = vth * dt;
        x += delta_x;
        y += delta_y;
        th += delta_th;
        
        geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);
        
        geometry_msgs::TransformStamped odom_trans;
        odom_trans.header.stamp = current_time;
        odom_trans.header.frame_id = "odom";
        odom_trans.child_frame_id = "base_link";

        odom_trans.transform.translation.x = x;
        odom_trans.transform.translation.y = y;
        odom_trans.transform.translation.z = 0.0;
        odom_trans.transform.rotation = odom_quat;
        
        odom_broadcaster.sendTransform(odom_trans);
        
        nav_msgs::Odometry odom;
        odom.header.stamp = current_time;
        odom.header.frame_id = "odom";
        
        odom.pose.pose.position.x = x;
        odom.pose.pose.position.y = y;
        odom.pose.pose.position.z = 0.0;
        odom.pose.pose.orientation = odom_quat;

        
        odom.child_frame_id = "base_link";
        odom.twist.twist.linear.x = vx;
        odom.twist.twist.linear.y = vy;
        odom.twist.twist.angular.z = vth;
        
        odom_pub.publish(odom);
        last_time = current_time;
    }
    iosev.run(); 
}
